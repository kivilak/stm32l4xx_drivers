
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000928  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000ab4  08000ab4  00001ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ac0  08000ac0  00001ad0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000ac0  08000ac0  00001ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000ac8  08000ad0  00001ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ac8  08000ac8  00001ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000acc  08000acc  00001acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001ad0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000119e  00000000  00000000  00001afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000041a  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  000030b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c5  00000000  00000000  000031d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000226c  00000000  00000000  00003295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001782  00000000  00000000  00005501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009264  00000000  00000000  00006c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000fee7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000038c  00000000  00000000  0000ff2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000102b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000a9c 	.word	0x08000a9c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	08000a9c 	.word	0x08000a9c

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <GPIO_PeriClockControl>:
 *
 * @retrun			- none
 *
 * @Note			- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI) {
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	460b      	mov	r3, r1
 80001e6:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE) {
 80001e8:	78fb      	ldrb	r3, [r7, #3]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d157      	bne.n	800029e <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA) {
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80001f4:	d106      	bne.n	8000204 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80001f6:	4b58      	ldr	r3, [pc, #352]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80001f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001fa:	4a57      	ldr	r2, [pc, #348]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	64d3      	str	r3, [r2, #76]	@ 0x4c
			GPIOG_PCLK_DI();
		} else if(pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 8000202:	e0a3      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOB) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a55      	ldr	r2, [pc, #340]	@ (800035c <GPIO_PeriClockControl+0x180>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d106      	bne.n	800021a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800020c:	4b52      	ldr	r3, [pc, #328]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800020e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000210:	4a51      	ldr	r2, [pc, #324]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000212:	f043 0302 	orr.w	r3, r3, #2
 8000216:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000218:	e098      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOC) {
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a50      	ldr	r2, [pc, #320]	@ (8000360 <GPIO_PeriClockControl+0x184>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000222:	4b4d      	ldr	r3, [pc, #308]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000226:	4a4c      	ldr	r2, [pc, #304]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000228:	f043 0304 	orr.w	r3, r3, #4
 800022c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800022e:	e08d      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOD) {
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a4c      	ldr	r2, [pc, #304]	@ (8000364 <GPIO_PeriClockControl+0x188>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d106      	bne.n	8000246 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000238:	4b47      	ldr	r3, [pc, #284]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800023a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023c:	4a46      	ldr	r2, [pc, #280]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800023e:	f043 0308 	orr.w	r3, r3, #8
 8000242:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000244:	e082      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOE) {
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a47      	ldr	r2, [pc, #284]	@ (8000368 <GPIO_PeriClockControl+0x18c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d106      	bne.n	800025c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800024e:	4b42      	ldr	r3, [pc, #264]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000252:	4a41      	ldr	r2, [pc, #260]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000254:	f043 0310 	orr.w	r3, r3, #16
 8000258:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800025a:	e077      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOF) {
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a43      	ldr	r2, [pc, #268]	@ (800036c <GPIO_PeriClockControl+0x190>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d106      	bne.n	8000272 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000264:	4b3c      	ldr	r3, [pc, #240]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000268:	4a3b      	ldr	r2, [pc, #236]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000270:	e06c      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOG) {
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a3e      	ldr	r2, [pc, #248]	@ (8000370 <GPIO_PeriClockControl+0x194>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d106      	bne.n	8000288 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800027a:	4b37      	ldr	r3, [pc, #220]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027e:	4a36      	ldr	r2, [pc, #216]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000284:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000286:	e061      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOH) {
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a3a      	ldr	r2, [pc, #232]	@ (8000374 <GPIO_PeriClockControl+0x198>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d15d      	bne.n	800034c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000290:	4b31      	ldr	r3, [pc, #196]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000294:	4a30      	ldr	r2, [pc, #192]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800029a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800029c:	e056      	b.n	800034c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA) {
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80002a4:	d106      	bne.n	80002b4 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80002a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ac:	f023 0301 	bic.w	r3, r3, #1
 80002b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002b2:	e04b      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOB) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a29      	ldr	r2, [pc, #164]	@ (800035c <GPIO_PeriClockControl+0x180>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d106      	bne.n	80002ca <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002bc:	4b26      	ldr	r3, [pc, #152]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c0:	4a25      	ldr	r2, [pc, #148]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002c2:	f023 0302 	bic.w	r3, r3, #2
 80002c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002c8:	e040      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOC) {
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a24      	ldr	r2, [pc, #144]	@ (8000360 <GPIO_PeriClockControl+0x184>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d106      	bne.n	80002e0 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80002d2:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d6:	4a20      	ldr	r2, [pc, #128]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002d8:	f023 0304 	bic.w	r3, r3, #4
 80002dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002de:	e035      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOD) {
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a20      	ldr	r2, [pc, #128]	@ (8000364 <GPIO_PeriClockControl+0x188>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d106      	bne.n	80002f6 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ee:	f023 0308 	bic.w	r3, r3, #8
 80002f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002f4:	e02a      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOE) {
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000368 <GPIO_PeriClockControl+0x18c>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80002fe:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000302:	4a15      	ldr	r2, [pc, #84]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000304:	f023 0310 	bic.w	r3, r3, #16
 8000308:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800030a:	e01f      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOF) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a17      	ldr	r2, [pc, #92]	@ (800036c <GPIO_PeriClockControl+0x190>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000314:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000318:	4a0f      	ldr	r2, [pc, #60]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800031a:	f023 0320 	bic.w	r3, r3, #32
 800031e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000320:	e014      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOG) {
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a12      	ldr	r2, [pc, #72]	@ (8000370 <GPIO_PeriClockControl+0x194>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000334:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000336:	e009      	b.n	800034c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOH) {
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a0e      	ldr	r2, [pc, #56]	@ (8000374 <GPIO_PeriClockControl+0x198>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d105      	bne.n	800034c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000340:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000344:	4a04      	ldr	r2, [pc, #16]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000346:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800034a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	48000400 	.word	0x48000400
 8000360:	48000800 	.word	0x48000800
 8000364:	48000c00 	.word	0x48000c00
 8000368:	48001000 	.word	0x48001000
 800036c:	48001400 	.word	0x48001400
 8000370:	48001800 	.word	0x48001800
 8000374:	48001c00 	.word	0x48001c00

08000378 <GPIO_Init>:
 *
 * @retrun			- none
 *
 * @Note			- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; //temp. register
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

	//Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2101      	movs	r1, #1
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff26 	bl	80001dc <GPIO_PeriClockControl>

	//1. configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	795b      	ldrb	r3, [r3, #5]
 8000394:	2b03      	cmp	r3, #3
 8000396:	d820      	bhi.n	80003da <GPIO_Init+0x62>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // each pin have 2bit there for 2bit shifting needed
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	795b      	ldrb	r3, [r3, #5]
 800039c:	461a      	mov	r2, r3
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	791b      	ldrb	r3, [r3, #4]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	fa02 f303 	lsl.w	r3, r2, r3
 80003a8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));		//clearing
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	791b      	ldrb	r3, [r3, #4]
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	2103      	movs	r1, #3
 80003b8:	fa01 f303 	lsl.w	r3, r1, r3
 80003bc:	43db      	mvns	r3, r3
 80003be:	4619      	mov	r1, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	400a      	ands	r2, r1
 80003c6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;		//setting
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	6819      	ldr	r1, [r3, #0]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	697a      	ldr	r2, [r7, #20]
 80003d4:	430a      	orrs	r2, r1
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	e0cf      	b.n	800057a <GPIO_Init+0x202>
	} else {
		//to be sure that this pin is configure as an input
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	791b      	ldrb	r3, [r3, #4]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	2103      	movs	r1, #3
 80003e8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ec:	43db      	mvns	r3, r3
 80003ee:	4619      	mov	r1, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	400a      	ands	r2, r1
 80003f6:	601a      	str	r2, [r3, #0]

		// interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <=  GPIO_MODE_IT_FT) {
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	795b      	ldrb	r3, [r3, #5]
 80003fc:	2b04      	cmp	r3, #4
 80003fe:	d817      	bhi.n	8000430 <GPIO_Init+0xb8>
			//configure falling trigger register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000400:	4b47      	ldr	r3, [pc, #284]	@ (8000520 <GPIO_Init+0x1a8>)
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	7912      	ldrb	r2, [r2, #4]
 8000408:	4611      	mov	r1, r2
 800040a:	2201      	movs	r2, #1
 800040c:	408a      	lsls	r2, r1
 800040e:	4611      	mov	r1, r2
 8000410:	4a43      	ldr	r2, [pc, #268]	@ (8000520 <GPIO_Init+0x1a8>)
 8000412:	430b      	orrs	r3, r1
 8000414:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000416:	4b42      	ldr	r3, [pc, #264]	@ (8000520 <GPIO_Init+0x1a8>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	7912      	ldrb	r2, [r2, #4]
 800041e:	4611      	mov	r1, r2
 8000420:	2201      	movs	r2, #1
 8000422:	408a      	lsls	r2, r1
 8000424:	43d2      	mvns	r2, r2
 8000426:	4611      	mov	r1, r2
 8000428:	4a3d      	ldr	r2, [pc, #244]	@ (8000520 <GPIO_Init+0x1a8>)
 800042a:	400b      	ands	r3, r1
 800042c:	6093      	str	r3, [r2, #8]
 800042e:	e035      	b.n	800049c <GPIO_Init+0x124>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT) {
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	795b      	ldrb	r3, [r3, #5]
 8000434:	2b05      	cmp	r3, #5
 8000436:	d817      	bhi.n	8000468 <GPIO_Init+0xf0>
			//configure rising trigger register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000438:	4b39      	ldr	r3, [pc, #228]	@ (8000520 <GPIO_Init+0x1a8>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7912      	ldrb	r2, [r2, #4]
 8000440:	4611      	mov	r1, r2
 8000442:	2201      	movs	r2, #1
 8000444:	408a      	lsls	r2, r1
 8000446:	4611      	mov	r1, r2
 8000448:	4a35      	ldr	r2, [pc, #212]	@ (8000520 <GPIO_Init+0x1a8>)
 800044a:	430b      	orrs	r3, r1
 800044c:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044e:	4b34      	ldr	r3, [pc, #208]	@ (8000520 <GPIO_Init+0x1a8>)
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	7912      	ldrb	r2, [r2, #4]
 8000456:	4611      	mov	r1, r2
 8000458:	2201      	movs	r2, #1
 800045a:	408a      	lsls	r2, r1
 800045c:	43d2      	mvns	r2, r2
 800045e:	4611      	mov	r1, r2
 8000460:	4a2f      	ldr	r2, [pc, #188]	@ (8000520 <GPIO_Init+0x1a8>)
 8000462:	400b      	ands	r3, r1
 8000464:	60d3      	str	r3, [r2, #12]
 8000466:	e019      	b.n	800049c <GPIO_Init+0x124>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT) {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	2b06      	cmp	r3, #6
 800046e:	d815      	bhi.n	800049c <GPIO_Init+0x124>
			//configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000470:	4b2b      	ldr	r3, [pc, #172]	@ (8000520 <GPIO_Init+0x1a8>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	7912      	ldrb	r2, [r2, #4]
 8000478:	4611      	mov	r1, r2
 800047a:	2201      	movs	r2, #1
 800047c:	408a      	lsls	r2, r1
 800047e:	4611      	mov	r1, r2
 8000480:	4a27      	ldr	r2, [pc, #156]	@ (8000520 <GPIO_Init+0x1a8>)
 8000482:	430b      	orrs	r3, r1
 8000484:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000486:	4b26      	ldr	r3, [pc, #152]	@ (8000520 <GPIO_Init+0x1a8>)
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	7912      	ldrb	r2, [r2, #4]
 800048e:	4611      	mov	r1, r2
 8000490:	2201      	movs	r2, #1
 8000492:	408a      	lsls	r2, r1
 8000494:	4611      	mov	r1, r2
 8000496:	4a22      	ldr	r2, [pc, #136]	@ (8000520 <GPIO_Init+0x1a8>)
 8000498:	430b      	orrs	r3, r1
 800049a:	6093      	str	r3, [r2, #8]
		}

		//configure the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	089b      	lsrs	r3, r3, #2
 80004a2:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	791b      	ldrb	r3, [r3, #4]
 80004a8:	f003 0303 	and.w	r3, r3, #3
 80004ac:	74bb      	strb	r3, [r7, #18]
			uint8_t portcode =  GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004b6:	d043      	beq.n	8000540 <GPIO_Init+0x1c8>
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a19      	ldr	r2, [pc, #100]	@ (8000524 <GPIO_Init+0x1ac>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d02b      	beq.n	800051a <GPIO_Init+0x1a2>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a18      	ldr	r2, [pc, #96]	@ (8000528 <GPIO_Init+0x1b0>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d024      	beq.n	8000516 <GPIO_Init+0x19e>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a16      	ldr	r2, [pc, #88]	@ (800052c <GPIO_Init+0x1b4>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d01d      	beq.n	8000512 <GPIO_Init+0x19a>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a15      	ldr	r2, [pc, #84]	@ (8000530 <GPIO_Init+0x1b8>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d016      	beq.n	800050e <GPIO_Init+0x196>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a13      	ldr	r2, [pc, #76]	@ (8000534 <GPIO_Init+0x1bc>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d00f      	beq.n	800050a <GPIO_Init+0x192>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a12      	ldr	r2, [pc, #72]	@ (8000538 <GPIO_Init+0x1c0>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d008      	beq.n	8000506 <GPIO_Init+0x18e>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a10      	ldr	r2, [pc, #64]	@ (800053c <GPIO_Init+0x1c4>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d101      	bne.n	8000502 <GPIO_Init+0x18a>
 80004fe:	2307      	movs	r3, #7
 8000500:	e01f      	b.n	8000542 <GPIO_Init+0x1ca>
 8000502:	2300      	movs	r3, #0
 8000504:	e01d      	b.n	8000542 <GPIO_Init+0x1ca>
 8000506:	2306      	movs	r3, #6
 8000508:	e01b      	b.n	8000542 <GPIO_Init+0x1ca>
 800050a:	2305      	movs	r3, #5
 800050c:	e019      	b.n	8000542 <GPIO_Init+0x1ca>
 800050e:	2304      	movs	r3, #4
 8000510:	e017      	b.n	8000542 <GPIO_Init+0x1ca>
 8000512:	2303      	movs	r3, #3
 8000514:	e015      	b.n	8000542 <GPIO_Init+0x1ca>
 8000516:	2302      	movs	r3, #2
 8000518:	e013      	b.n	8000542 <GPIO_Init+0x1ca>
 800051a:	2301      	movs	r3, #1
 800051c:	e011      	b.n	8000542 <GPIO_Init+0x1ca>
 800051e:	bf00      	nop
 8000520:	40010400 	.word	0x40010400
 8000524:	48000400 	.word	0x48000400
 8000528:	48000800 	.word	0x48000800
 800052c:	48000c00 	.word	0x48000c00
 8000530:	48001000 	.word	0x48001000
 8000534:	48001400 	.word	0x48001400
 8000538:	48001800 	.word	0x48001800
 800053c:	48001c00 	.word	0x48001c00
 8000540:	2300      	movs	r3, #0
 8000542:	747b      	strb	r3, [r7, #17]

			SYSCFG_PCLK_EN();
 8000544:	4b5c      	ldr	r3, [pc, #368]	@ (80006b8 <GPIO_Init+0x340>)
 8000546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000548:	4a5b      	ldr	r2, [pc, #364]	@ (80006b8 <GPIO_Init+0x340>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	6613      	str	r3, [r2, #96]	@ 0x60
			SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000550:	7c7a      	ldrb	r2, [r7, #17]
 8000552:	7cbb      	ldrb	r3, [r7, #18]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	fa02 f103 	lsl.w	r1, r2, r3
 800055a:	4a58      	ldr	r2, [pc, #352]	@ (80006bc <GPIO_Init+0x344>)
 800055c:	7cfb      	ldrb	r3, [r7, #19]
 800055e:	3302      	adds	r3, #2
 8000560:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000564:	4b56      	ldr	r3, [pc, #344]	@ (80006c0 <GPIO_Init+0x348>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	7912      	ldrb	r2, [r2, #4]
 800056c:	4611      	mov	r1, r2
 800056e:	2201      	movs	r2, #1
 8000570:	408a      	lsls	r2, r1
 8000572:	4611      	mov	r1, r2
 8000574:	4a52      	ldr	r2, [pc, #328]	@ (80006c0 <GPIO_Init+0x348>)
 8000576:	430b      	orrs	r3, r1
 8000578:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	799b      	ldrb	r3, [r3, #6]
 8000582:	461a      	mov	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	4619      	mov	r1, r3
 800059c:	2303      	movs	r3, #3
 800059e:	408b      	lsls	r3, r1
 80005a0:	43db      	mvns	r3, r3
 80005a2:	4619      	mov	r1, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	400a      	ands	r2, r1
 80005aa:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6899      	ldr	r1, [r3, #8]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	697a      	ldr	r2, [r7, #20]
 80005b8:	430a      	orrs	r2, r1
 80005ba:	609a      	str	r2, [r3, #8]

	temp = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	79db      	ldrb	r3, [r3, #7]
 80005c4:	461a      	mov	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68da      	ldr	r2, [r3, #12]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	4619      	mov	r1, r3
 80005de:	2303      	movs	r3, #3
 80005e0:	408b      	lsls	r3, r1
 80005e2:	43db      	mvns	r3, r3
 80005e4:	4619      	mov	r1, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	400a      	ands	r2, r1
 80005ec:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	68d9      	ldr	r1, [r3, #12]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	430a      	orrs	r2, r1
 80005fc:	60da      	str	r2, [r3, #12]

	temp = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]

	//4. configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	7a1b      	ldrb	r3, [r3, #8]
 8000606:	461a      	mov	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	685a      	ldr	r2, [r3, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	4619      	mov	r1, r3
 800061e:	2301      	movs	r3, #1
 8000620:	408b      	lsls	r3, r1
 8000622:	43db      	mvns	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	400a      	ands	r2, r1
 800062c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6859      	ldr	r1, [r3, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	430a      	orrs	r2, r1
 800063c:	605a      	str	r2, [r3, #4]

	temp = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	795b      	ldrb	r3, [r3, #5]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d131      	bne.n	80006ae <GPIO_Init+0x336>
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; 	//get the pin in AFRL or AFRH (0, 1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4 * temp2));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	7c3a      	ldrb	r2, [r7, #16]
 8000662:	3208      	adds	r2, #8
 8000664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	220f      	movs	r2, #15
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	43db      	mvns	r3, r3
 8000674:	4618      	mov	r0, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	7c3a      	ldrb	r2, [r7, #16]
 800067c:	4001      	ands	r1, r0
 800067e:	3208      	adds	r2, #8
 8000680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	7c3a      	ldrb	r2, [r7, #16]
 800068a:	3208      	adds	r2, #8
 800068c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	7a5b      	ldrb	r3, [r3, #9]
 8000694:	461a      	mov	r2, r3
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	fa02 f303 	lsl.w	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	7c3a      	ldrb	r2, [r7, #16]
 80006a6:	4301      	orrs	r1, r0
 80006a8:	3208      	adds	r2, #8
 80006aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006ae:	bf00      	nop
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010000 	.word	0x40010000
 80006c0:	40010400 	.word	0x40010400

080006c4 <SPI_PeriClockControl>:
 *
 * @retrun			- none
 *
 * @Note			- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t ENorDI) {
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE) {
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d120      	bne.n	8000718 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1) {
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a22      	ldr	r2, [pc, #136]	@ (8000764 <SPI_PeriClockControl+0xa0>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d106      	bne.n	80006ec <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 80006de:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <SPI_PeriClockControl+0xa4>)
 80006e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006e2:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <SPI_PeriClockControl+0xa4>)
 80006e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006e8:	6613      	str	r3, [r2, #96]	@ 0x60
			SPI2_PCLK_DI();
		} else if(pSPIx == SPI3) {
			SPI3_PCLK_DI();
		}
	}
}
 80006ea:	e035      	b.n	8000758 <SPI_PeriClockControl+0x94>
		} else if(pSPIx == SPI2) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a1f      	ldr	r2, [pc, #124]	@ (800076c <SPI_PeriClockControl+0xa8>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d106      	bne.n	8000702 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <SPI_PeriClockControl+0xa4>)
 80006f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000768 <SPI_PeriClockControl+0xa4>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fe:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000700:	e02a      	b.n	8000758 <SPI_PeriClockControl+0x94>
		} else if(pSPIx == SPI3) {
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a1a      	ldr	r2, [pc, #104]	@ (8000770 <SPI_PeriClockControl+0xac>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d126      	bne.n	8000758 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 800070a:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <SPI_PeriClockControl+0xa4>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800070e:	4a16      	ldr	r2, [pc, #88]	@ (8000768 <SPI_PeriClockControl+0xa4>)
 8000710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000714:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000716:	e01f      	b.n	8000758 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <SPI_PeriClockControl+0xa0>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d106      	bne.n	800072e <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <SPI_PeriClockControl+0xa4>)
 8000722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000724:	4a10      	ldr	r2, [pc, #64]	@ (8000768 <SPI_PeriClockControl+0xa4>)
 8000726:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800072a:	6613      	str	r3, [r2, #96]	@ 0x60
}
 800072c:	e014      	b.n	8000758 <SPI_PeriClockControl+0x94>
		} else if(pSPIx == SPI2) {
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a0e      	ldr	r2, [pc, #56]	@ (800076c <SPI_PeriClockControl+0xa8>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d106      	bne.n	8000744 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <SPI_PeriClockControl+0xa4>)
 8000738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073a:	4a0b      	ldr	r2, [pc, #44]	@ (8000768 <SPI_PeriClockControl+0xa4>)
 800073c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000740:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000742:	e009      	b.n	8000758 <SPI_PeriClockControl+0x94>
		} else if(pSPIx == SPI3) {
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a0a      	ldr	r2, [pc, #40]	@ (8000770 <SPI_PeriClockControl+0xac>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d105      	bne.n	8000758 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <SPI_PeriClockControl+0xa4>)
 800074e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000750:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <SPI_PeriClockControl+0xa4>)
 8000752:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000756:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40013000 	.word	0x40013000
 8000768:	40021000 	.word	0x40021000
 800076c:	40003800 	.word	0x40003800
 8000770:	40003c00 	.word	0x40003c00

08000774 <SPI_Init>:
 *
 * @retrun			- none
 *
 * @Note			- none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2101      	movs	r1, #1
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff9e 	bl	80006c4 <SPI_PeriClockControl>

	//configure the SPI_CR1 register
	uint32_t tempreg1 = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg1 |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	4313      	orrs	r3, r2
 8000796:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d104      	bne.n	80007aa <SPI_Init+0x36>
		//bidi mode should be cleared
		tempreg1 &= ~(1 << SPI_CR1_BIDIMODE);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	e014      	b.n	80007d4 <SPI_Init+0x60>
	} else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	795b      	ldrb	r3, [r3, #5]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d104      	bne.n	80007bc <SPI_Init+0x48>
		//bidi mode should be set
		tempreg1 |= (1 << SPI_CR1_BIDIMODE);
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	e00b      	b.n	80007d4 <SPI_Init+0x60>
	} else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	795b      	ldrb	r3, [r3, #5]
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	d107      	bne.n	80007d4 <SPI_Init+0x60>
		//bidi mode should be cleared
		tempreg1 &= ~(1 << SPI_CR1_BIDIMODE);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007ca:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg1 |= (1 << SPI_CR1_RXONLY);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007d2:	60fb      	str	r3, [r7, #12]
	}

	//3. configure the SPI serial clock speed (baud rate)
	tempreg1 |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	799b      	ldrb	r3, [r3, #6]
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	4313      	orrs	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]

	//4. configure the CPOL
	tempreg1 |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7a1b      	ldrb	r3, [r3, #8]
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]

	//5. configure the CPHA
	tempreg1 |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7a5b      	ldrb	r3, [r3, #9]
 80007f0:	461a      	mov	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]

	//6. configure the SSM
	tempreg1 |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7a9b      	ldrb	r3, [r3, #10]
 80007fc:	025b      	lsls	r3, r3, #9
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4313      	orrs	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]

	//configure the SPI_CR2 register
	uint32_t tempreg2 = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]

	//1. configure the DS
	tempreg2 |= pSPIHandle->SPIConfig.SPI_DS << SPI_CR2_DS;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	79db      	ldrb	r3, [r3, #7]
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	4313      	orrs	r3, r2
 8000812:	60bb      	str	r3, [r7, #8]

	pSPIHandle->pSPIx->CR1 = tempreg1;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	68fa      	ldr	r2, [r7, #12]
 800081a:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->CR2 = tempreg2;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	68ba      	ldr	r2, [r7, #8]
 8000822:	605a      	str	r2, [r3, #4]
}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <SPI_GetFlagStatus>:
 *
 * @retrun			- none
 *
 * @Note			- none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName) {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	689a      	ldr	r2, [r3, #8]
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	4013      	ands	r3, r2
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000842:	2301      	movs	r3, #1
 8000844:	e000      	b.n	8000848 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <SPI_SendData>:
 *
 * @Note			- This is a blocking call
 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t length)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b084      	sub	sp, #16
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
    while(length > 0) // blocking
 800085e:	e025      	b.n	80008ac <SPI_SendData+0x5a>
    {
        //1. wait until TXE is set
        while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000860:	bf00      	nop
 8000862:	2102      	movs	r1, #2
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f7ff ffe1 	bl	800082c <SPI_GetFlagStatus>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0f8      	beq.n	8000862 <SPI_SendData+0x10>

        //2. check the 4 DS (DFF) bits in CR2 and handle for correct size

        if ((((1 << SPI_DS_NUM_BITS) - 1) & (pSPIx->CR2 >> SPI_CR2_DS)) <= SPI_DS_8BITS) {
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	2b00      	cmp	r3, #0
 800087c:	d10b      	bne.n	8000896 <SPI_SendData+0x44>
			 // 8-bit data
			// pSPIx->DR = *pTxBuffer;
			 *((volatile uint8_t *)&pSPIx->DR) = *pTxBuffer;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	330c      	adds	r3, #12
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	7812      	ldrb	r2, [r2, #0]
 8000886:	701a      	strb	r2, [r3, #0]
			 length--; // decrement once because data is 8-bit wide
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	607b      	str	r3, [r7, #4]
			 pTxBuffer++;
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3301      	adds	r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	e00a      	b.n	80008ac <SPI_SendData+0x5a>
		 } else {
			 // 16-bit data
			 pSPIx->DR = *((uint16_t*)pTxBuffer); //typecast to 16-bits
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	60da      	str	r2, [r3, #12]
			 length -= 2; // decrement twice for 2x 8-bit data
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b02      	subs	r3, #2
 80008a4:	607b      	str	r3, [r7, #4]
			 (uint16_t*)pTxBuffer++; //typecast to 16-bits
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	3301      	adds	r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
    while(length > 0) // blocking
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1d6      	bne.n	8000860 <SPI_SendData+0xe>
		 }
    }
}
 80008b2:	bf00      	nop
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <SPI_PeripheralControl>:
			pTxBuffer++;
		}
	}
}*/

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t ENorDI) {
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE) {
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d106      	bne.n	80008dc <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80008da:	e005      	b.n	80008e8 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	601a      	str	r2, [r3, #0]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr

080008f2 <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t ENorDI) {
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	460b      	mov	r3, r1
 80008fc:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE) {
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d106      	bne.n	8000912 <SPI_SSIConfig+0x20>
			pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	601a      	str	r2, [r3, #0]
		} else {
			pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
		}
}
 8000910:	e005      	b.n	800091e <SPI_SSIConfig+0x2c>
			pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	601a      	str	r2, [r3, #0]
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <SPI2_GPIOInits+0x40>)
 8000930:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000932:	2302      	movs	r3, #2
 8000934:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000936:	2305      	movs	r3, #5
 8000938:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800093a:	2300      	movs	r3, #0
 800093c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800093e:	2300      	movs	r3, #0
 8000940:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000942:	2302      	movs	r3, #2
 8000944:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000946:	230d      	movs	r3, #13
 8000948:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fd13 	bl	8000378 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000952:	230f      	movs	r3, #15
 8000954:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fd0d 	bl	8000378 <GPIO_Init>
	//NSS
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);


}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	48000400 	.word	0x48000400

0800096c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <SPI2_Inits+0x38>)
 8000974:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000976:	2301      	movs	r3, #1
 8000978:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800097a:	2301      	movs	r3, #1
 800097c:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;//generates sclk of 8MHz
 800097e:	2300      	movs	r3, #0
 8000980:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DS = SPI_DS_8BITS;
 8000982:	2307      	movs	r3, #7
 8000984:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; //software slave management enabled for NSS pin
 800098e:	2301      	movs	r3, #1
 8000990:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff feed 	bl	8000774 <SPI_Init>
}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40003800 	.word	0x40003800

080009a8 <main>:

int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 80009ae:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <main+0x50>)
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80009b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80009b8:	f7ff ffb6 	bl	8000928 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80009bc:	f7ff ffd6 	bl	800096c <SPI2_Inits>

	//this makes NSS signal internally high and avoids MODF error
	SPI_SSIConfig(SPI2,ENABLE);
 80009c0:	2101      	movs	r1, #1
 80009c2:	480e      	ldr	r0, [pc, #56]	@ (80009fc <main+0x54>)
 80009c4:	f7ff ff95 	bl	80008f2 <SPI_SSIConfig>

	//enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 80009c8:	2101      	movs	r1, #1
 80009ca:	480c      	ldr	r0, [pc, #48]	@ (80009fc <main+0x54>)
 80009cc:	f7ff ff76 	bl	80008bc <SPI_PeripheralControl>

	//to send data
	SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fbfa 	bl	80001cc <strlen>
 80009d8:	4602      	mov	r2, r0
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4807      	ldr	r0, [pc, #28]	@ (80009fc <main+0x54>)
 80009e0:	f7ff ff37 	bl	8000852 <SPI_SendData>

	while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG));
 80009e4:	bf00      	nop
 80009e6:	2180      	movs	r1, #128	@ 0x80
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <main+0x54>)
 80009ea:	f7ff ff1f 	bl	800082c <SPI_GetFlagStatus>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1f8      	bne.n	80009e6 <main+0x3e>

	while(1);
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <main+0x4c>
 80009f8:	08000ab4 	.word	0x08000ab4
 80009fc:	40003800 	.word	0x40003800

08000a00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a00:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a02:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a04:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a08:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0a:	490d      	ldr	r1, [pc, #52]	@ (8000a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a44 <LoopForever+0xe>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a20:	4c0a      	ldr	r4, [pc, #40]	@ (8000a4c <LoopForever+0x16>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a2e:	f000 f811 	bl	8000a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a32:	f7ff ffb9 	bl	80009a8 <main>

08000a36 <LoopForever>:

LoopForever:
  b LoopForever
 8000a36:	e7fe      	b.n	8000a36 <LoopForever>
  ldr   r0, =_estack
 8000a38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a44:	08000ad0 	.word	0x08000ad0
  ldr r2, =_sbss
 8000a48:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a4c:	2000001c 	.word	0x2000001c

08000a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_2_IRQHandler>
	...

08000a54 <__libc_init_array>:
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	4d0d      	ldr	r5, [pc, #52]	@ (8000a8c <__libc_init_array+0x38>)
 8000a58:	4c0d      	ldr	r4, [pc, #52]	@ (8000a90 <__libc_init_array+0x3c>)
 8000a5a:	1b64      	subs	r4, r4, r5
 8000a5c:	10a4      	asrs	r4, r4, #2
 8000a5e:	2600      	movs	r6, #0
 8000a60:	42a6      	cmp	r6, r4
 8000a62:	d109      	bne.n	8000a78 <__libc_init_array+0x24>
 8000a64:	4d0b      	ldr	r5, [pc, #44]	@ (8000a94 <__libc_init_array+0x40>)
 8000a66:	4c0c      	ldr	r4, [pc, #48]	@ (8000a98 <__libc_init_array+0x44>)
 8000a68:	f000 f818 	bl	8000a9c <_init>
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	10a4      	asrs	r4, r4, #2
 8000a70:	2600      	movs	r6, #0
 8000a72:	42a6      	cmp	r6, r4
 8000a74:	d105      	bne.n	8000a82 <__libc_init_array+0x2e>
 8000a76:	bd70      	pop	{r4, r5, r6, pc}
 8000a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a7c:	4798      	blx	r3
 8000a7e:	3601      	adds	r6, #1
 8000a80:	e7ee      	b.n	8000a60 <__libc_init_array+0xc>
 8000a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a86:	4798      	blx	r3
 8000a88:	3601      	adds	r6, #1
 8000a8a:	e7f2      	b.n	8000a72 <__libc_init_array+0x1e>
 8000a8c:	08000ac8 	.word	0x08000ac8
 8000a90:	08000ac8 	.word	0x08000ac8
 8000a94:	08000ac8 	.word	0x08000ac8
 8000a98:	08000acc 	.word	0x08000acc

08000a9c <_init>:
 8000a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9e:	bf00      	nop
 8000aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa2:	bc08      	pop	{r3}
 8000aa4:	469e      	mov	lr, r3
 8000aa6:	4770      	bx	lr

08000aa8 <_fini>:
 8000aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aaa:	bf00      	nop
 8000aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aae:	bc08      	pop	{r3}
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	4770      	bx	lr
