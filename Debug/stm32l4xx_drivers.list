
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000086c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009f8  08000a00  00001a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009f8  080009f8  00001a00  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080009f8  080009f8  00001a00  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080009f8  08000a00  00001a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009f8  080009f8  000019f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009fc  080009fc  000019fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001a00  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b0c  00000000  00000000  00001a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002cc  00000000  00000000  00002536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00002808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008c  00000000  00000000  000028d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f57  00000000  00000000  0000295c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000010d7  00000000  00000000  000048b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008b07  00000000  00000000  0000598a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000e491  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000288  00000000  00000000  0000e4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0000e75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080009e0 	.word	0x080009e0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	080009e0 	.word	0x080009e0

080001cc <GPIO_PeriClockControl>:
 *
 * @retrun			- none
 *
 * @Note			- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI) {
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	460b      	mov	r3, r1
 80001d6:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE) {
 80001d8:	78fb      	ldrb	r3, [r7, #3]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d157      	bne.n	800028e <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA) {
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80001e4:	d106      	bne.n	80001f4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80001e6:	4b58      	ldr	r3, [pc, #352]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80001e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001ea:	4a57      	ldr	r2, [pc, #348]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
			GPIOG_PCLK_DI();
		} else if(pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 80001f2:	e0a3      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOB) {
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a55      	ldr	r2, [pc, #340]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d106      	bne.n	800020a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80001fc:	4b52      	ldr	r3, [pc, #328]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80001fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000200:	4a51      	ldr	r2, [pc, #324]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000208:	e098      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOC) {
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a50      	ldr	r2, [pc, #320]	@ (8000350 <GPIO_PeriClockControl+0x184>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000212:	4b4d      	ldr	r3, [pc, #308]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000216:	4a4c      	ldr	r2, [pc, #304]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000218:	f043 0304 	orr.w	r3, r3, #4
 800021c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800021e:	e08d      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOD) {
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a4c      	ldr	r2, [pc, #304]	@ (8000354 <GPIO_PeriClockControl+0x188>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000228:	4b47      	ldr	r3, [pc, #284]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800022a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022c:	4a46      	ldr	r2, [pc, #280]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800022e:	f043 0308 	orr.w	r3, r3, #8
 8000232:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000234:	e082      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOE) {
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a47      	ldr	r2, [pc, #284]	@ (8000358 <GPIO_PeriClockControl+0x18c>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800023e:	4b42      	ldr	r3, [pc, #264]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000242:	4a41      	ldr	r2, [pc, #260]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000244:	f043 0310 	orr.w	r3, r3, #16
 8000248:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800024a:	e077      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOF) {
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a43      	ldr	r2, [pc, #268]	@ (800035c <GPIO_PeriClockControl+0x190>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000254:	4b3c      	ldr	r3, [pc, #240]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000258:	4a3b      	ldr	r2, [pc, #236]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800025a:	f043 0320 	orr.w	r3, r3, #32
 800025e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000260:	e06c      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOG) {
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a3e      	ldr	r2, [pc, #248]	@ (8000360 <GPIO_PeriClockControl+0x194>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800026a:	4b37      	ldr	r3, [pc, #220]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	4a36      	ldr	r2, [pc, #216]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000274:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000276:	e061      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOH) {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a3a      	ldr	r2, [pc, #232]	@ (8000364 <GPIO_PeriClockControl+0x198>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d15d      	bne.n	800033c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000280:	4b31      	ldr	r3, [pc, #196]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000284:	4a30      	ldr	r2, [pc, #192]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800028a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800028c:	e056      	b.n	800033c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA) {
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000296:	4b2c      	ldr	r3, [pc, #176]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800029a:	4a2b      	ldr	r2, [pc, #172]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800029c:	f023 0301 	bic.w	r3, r3, #1
 80002a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002a2:	e04b      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOB) {
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a29      	ldr	r2, [pc, #164]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002ac:	4b26      	ldr	r3, [pc, #152]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002b0:	4a25      	ldr	r2, [pc, #148]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002b2:	f023 0302 	bic.w	r3, r3, #2
 80002b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002b8:	e040      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOC) {
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a24      	ldr	r2, [pc, #144]	@ (8000350 <GPIO_PeriClockControl+0x184>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d106      	bne.n	80002d0 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80002c2:	4b21      	ldr	r3, [pc, #132]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c6:	4a20      	ldr	r2, [pc, #128]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002c8:	f023 0304 	bic.w	r3, r3, #4
 80002cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002ce:	e035      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOD) {
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a20      	ldr	r2, [pc, #128]	@ (8000354 <GPIO_PeriClockControl+0x188>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80002d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002de:	f023 0308 	bic.w	r3, r3, #8
 80002e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002e4:	e02a      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOE) {
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <GPIO_PeriClockControl+0x18c>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80002ee:	4b16      	ldr	r3, [pc, #88]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f2:	4a15      	ldr	r2, [pc, #84]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 80002f4:	f023 0310 	bic.w	r3, r3, #16
 80002f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002fa:	e01f      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOF) {
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a17      	ldr	r2, [pc, #92]	@ (800035c <GPIO_PeriClockControl+0x190>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000304:	4b10      	ldr	r3, [pc, #64]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000308:	4a0f      	ldr	r2, [pc, #60]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800030a:	f023 0320 	bic.w	r3, r3, #32
 800030e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000310:	e014      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOG) {
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a12      	ldr	r2, [pc, #72]	@ (8000360 <GPIO_PeriClockControl+0x194>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800031a:	4b0b      	ldr	r3, [pc, #44]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031e:	4a0a      	ldr	r2, [pc, #40]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000324:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000326:	e009      	b.n	800033c <GPIO_PeriClockControl+0x170>
		} else if(pGPIOx == GPIOH) {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a0e      	ldr	r2, [pc, #56]	@ (8000364 <GPIO_PeriClockControl+0x198>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d105      	bne.n	800033c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000330:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <GPIO_PeriClockControl+0x17c>)
 8000336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800033a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000
 800034c:	48000400 	.word	0x48000400
 8000350:	48000800 	.word	0x48000800
 8000354:	48000c00 	.word	0x48000c00
 8000358:	48001000 	.word	0x48001000
 800035c:	48001400 	.word	0x48001400
 8000360:	48001800 	.word	0x48001800
 8000364:	48001c00 	.word	0x48001c00

08000368 <GPIO_Init>:
 *
 * @retrun			- none
 *
 * @Note			- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000368:	b480      	push	{r7}
 800036a:	b087      	sub	sp, #28
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; //temp. register
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]

	//1. configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	795b      	ldrb	r3, [r3, #5]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d820      	bhi.n	80003be <GPIO_Init+0x56>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // each pin have 2bit there for 2bit shifting needed
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	795b      	ldrb	r3, [r3, #5]
 8000380:	461a      	mov	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	791b      	ldrb	r3, [r3, #4]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));		//clearing
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	791b      	ldrb	r3, [r3, #4]
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	2103      	movs	r1, #3
 800039c:	fa01 f303 	lsl.w	r3, r1, r3
 80003a0:	43db      	mvns	r3, r3
 80003a2:	4619      	mov	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	400a      	ands	r2, r1
 80003aa:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;		//setting
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	6819      	ldr	r1, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	697a      	ldr	r2, [r7, #20]
 80003b8:	430a      	orrs	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	e0cf      	b.n	800055e <GPIO_Init+0x1f6>
	} else {
		//to be sure that this pin is configure as an input
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	791b      	ldrb	r3, [r3, #4]
 80003c8:	005b      	lsls	r3, r3, #1
 80003ca:	2103      	movs	r1, #3
 80003cc:	fa01 f303 	lsl.w	r3, r1, r3
 80003d0:	43db      	mvns	r3, r3
 80003d2:	4619      	mov	r1, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	400a      	ands	r2, r1
 80003da:	601a      	str	r2, [r3, #0]

		// interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <=  GPIO_MODE_IT_FT) {
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	795b      	ldrb	r3, [r3, #5]
 80003e0:	2b04      	cmp	r3, #4
 80003e2:	d817      	bhi.n	8000414 <GPIO_Init+0xac>
			//configure falling trigger register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003e4:	4b47      	ldr	r3, [pc, #284]	@ (8000504 <GPIO_Init+0x19c>)
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	7912      	ldrb	r2, [r2, #4]
 80003ec:	4611      	mov	r1, r2
 80003ee:	2201      	movs	r2, #1
 80003f0:	408a      	lsls	r2, r1
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a43      	ldr	r2, [pc, #268]	@ (8000504 <GPIO_Init+0x19c>)
 80003f6:	430b      	orrs	r3, r1
 80003f8:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003fa:	4b42      	ldr	r3, [pc, #264]	@ (8000504 <GPIO_Init+0x19c>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	7912      	ldrb	r2, [r2, #4]
 8000402:	4611      	mov	r1, r2
 8000404:	2201      	movs	r2, #1
 8000406:	408a      	lsls	r2, r1
 8000408:	43d2      	mvns	r2, r2
 800040a:	4611      	mov	r1, r2
 800040c:	4a3d      	ldr	r2, [pc, #244]	@ (8000504 <GPIO_Init+0x19c>)
 800040e:	400b      	ands	r3, r1
 8000410:	6093      	str	r3, [r2, #8]
 8000412:	e035      	b.n	8000480 <GPIO_Init+0x118>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	795b      	ldrb	r3, [r3, #5]
 8000418:	2b05      	cmp	r3, #5
 800041a:	d817      	bhi.n	800044c <GPIO_Init+0xe4>
			//configure rising trigger register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800041c:	4b39      	ldr	r3, [pc, #228]	@ (8000504 <GPIO_Init+0x19c>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	7912      	ldrb	r2, [r2, #4]
 8000424:	4611      	mov	r1, r2
 8000426:	2201      	movs	r2, #1
 8000428:	408a      	lsls	r2, r1
 800042a:	4611      	mov	r1, r2
 800042c:	4a35      	ldr	r2, [pc, #212]	@ (8000504 <GPIO_Init+0x19c>)
 800042e:	430b      	orrs	r3, r1
 8000430:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000432:	4b34      	ldr	r3, [pc, #208]	@ (8000504 <GPIO_Init+0x19c>)
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	7912      	ldrb	r2, [r2, #4]
 800043a:	4611      	mov	r1, r2
 800043c:	2201      	movs	r2, #1
 800043e:	408a      	lsls	r2, r1
 8000440:	43d2      	mvns	r2, r2
 8000442:	4611      	mov	r1, r2
 8000444:	4a2f      	ldr	r2, [pc, #188]	@ (8000504 <GPIO_Init+0x19c>)
 8000446:	400b      	ands	r3, r1
 8000448:	60d3      	str	r3, [r2, #12]
 800044a:	e019      	b.n	8000480 <GPIO_Init+0x118>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	795b      	ldrb	r3, [r3, #5]
 8000450:	2b06      	cmp	r3, #6
 8000452:	d815      	bhi.n	8000480 <GPIO_Init+0x118>
			//configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000454:	4b2b      	ldr	r3, [pc, #172]	@ (8000504 <GPIO_Init+0x19c>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	7912      	ldrb	r2, [r2, #4]
 800045c:	4611      	mov	r1, r2
 800045e:	2201      	movs	r2, #1
 8000460:	408a      	lsls	r2, r1
 8000462:	4611      	mov	r1, r2
 8000464:	4a27      	ldr	r2, [pc, #156]	@ (8000504 <GPIO_Init+0x19c>)
 8000466:	430b      	orrs	r3, r1
 8000468:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046a:	4b26      	ldr	r3, [pc, #152]	@ (8000504 <GPIO_Init+0x19c>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	7912      	ldrb	r2, [r2, #4]
 8000472:	4611      	mov	r1, r2
 8000474:	2201      	movs	r2, #1
 8000476:	408a      	lsls	r2, r1
 8000478:	4611      	mov	r1, r2
 800047a:	4a22      	ldr	r2, [pc, #136]	@ (8000504 <GPIO_Init+0x19c>)
 800047c:	430b      	orrs	r3, r1
 800047e:	6093      	str	r3, [r2, #8]
		}

		//configure the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	089b      	lsrs	r3, r3, #2
 8000486:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	791b      	ldrb	r3, [r3, #4]
 800048c:	f003 0303 	and.w	r3, r3, #3
 8000490:	74bb      	strb	r3, [r7, #18]
			uint8_t portcode =  GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800049a:	d043      	beq.n	8000524 <GPIO_Init+0x1bc>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a19      	ldr	r2, [pc, #100]	@ (8000508 <GPIO_Init+0x1a0>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d02b      	beq.n	80004fe <GPIO_Init+0x196>
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a18      	ldr	r2, [pc, #96]	@ (800050c <GPIO_Init+0x1a4>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d024      	beq.n	80004fa <GPIO_Init+0x192>
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a16      	ldr	r2, [pc, #88]	@ (8000510 <GPIO_Init+0x1a8>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d01d      	beq.n	80004f6 <GPIO_Init+0x18e>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a15      	ldr	r2, [pc, #84]	@ (8000514 <GPIO_Init+0x1ac>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d016      	beq.n	80004f2 <GPIO_Init+0x18a>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a13      	ldr	r2, [pc, #76]	@ (8000518 <GPIO_Init+0x1b0>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d00f      	beq.n	80004ee <GPIO_Init+0x186>
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a12      	ldr	r2, [pc, #72]	@ (800051c <GPIO_Init+0x1b4>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d008      	beq.n	80004ea <GPIO_Init+0x182>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a10      	ldr	r2, [pc, #64]	@ (8000520 <GPIO_Init+0x1b8>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d101      	bne.n	80004e6 <GPIO_Init+0x17e>
 80004e2:	2307      	movs	r3, #7
 80004e4:	e01f      	b.n	8000526 <GPIO_Init+0x1be>
 80004e6:	2300      	movs	r3, #0
 80004e8:	e01d      	b.n	8000526 <GPIO_Init+0x1be>
 80004ea:	2306      	movs	r3, #6
 80004ec:	e01b      	b.n	8000526 <GPIO_Init+0x1be>
 80004ee:	2305      	movs	r3, #5
 80004f0:	e019      	b.n	8000526 <GPIO_Init+0x1be>
 80004f2:	2304      	movs	r3, #4
 80004f4:	e017      	b.n	8000526 <GPIO_Init+0x1be>
 80004f6:	2303      	movs	r3, #3
 80004f8:	e015      	b.n	8000526 <GPIO_Init+0x1be>
 80004fa:	2302      	movs	r3, #2
 80004fc:	e013      	b.n	8000526 <GPIO_Init+0x1be>
 80004fe:	2301      	movs	r3, #1
 8000500:	e011      	b.n	8000526 <GPIO_Init+0x1be>
 8000502:	bf00      	nop
 8000504:	40010400 	.word	0x40010400
 8000508:	48000400 	.word	0x48000400
 800050c:	48000800 	.word	0x48000800
 8000510:	48000c00 	.word	0x48000c00
 8000514:	48001000 	.word	0x48001000
 8000518:	48001400 	.word	0x48001400
 800051c:	48001800 	.word	0x48001800
 8000520:	48001c00 	.word	0x48001c00
 8000524:	2300      	movs	r3, #0
 8000526:	747b      	strb	r3, [r7, #17]

			SYSCFG_PCLK_EN();
 8000528:	4b5c      	ldr	r3, [pc, #368]	@ (800069c <GPIO_Init+0x334>)
 800052a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800052c:	4a5b      	ldr	r2, [pc, #364]	@ (800069c <GPIO_Init+0x334>)
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	6613      	str	r3, [r2, #96]	@ 0x60
			SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000534:	7c7a      	ldrb	r2, [r7, #17]
 8000536:	7cbb      	ldrb	r3, [r7, #18]
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	fa02 f103 	lsl.w	r1, r2, r3
 800053e:	4a58      	ldr	r2, [pc, #352]	@ (80006a0 <GPIO_Init+0x338>)
 8000540:	7cfb      	ldrb	r3, [r7, #19]
 8000542:	3302      	adds	r3, #2
 8000544:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000548:	4b56      	ldr	r3, [pc, #344]	@ (80006a4 <GPIO_Init+0x33c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7912      	ldrb	r2, [r2, #4]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	4611      	mov	r1, r2
 8000558:	4a52      	ldr	r2, [pc, #328]	@ (80006a4 <GPIO_Init+0x33c>)
 800055a:	430b      	orrs	r3, r1
 800055c:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	799b      	ldrb	r3, [r3, #6]
 8000566:	461a      	mov	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	689a      	ldr	r2, [r3, #8]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	4619      	mov	r1, r3
 8000580:	2303      	movs	r3, #3
 8000582:	408b      	lsls	r3, r1
 8000584:	43db      	mvns	r3, r3
 8000586:	4619      	mov	r1, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	400a      	ands	r2, r1
 800058e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6899      	ldr	r1, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	430a      	orrs	r2, r1
 800059e:	609a      	str	r2, [r3, #8]

	temp = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	79db      	ldrb	r3, [r3, #7]
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	68da      	ldr	r2, [r3, #12]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	4619      	mov	r1, r3
 80005c2:	2303      	movs	r3, #3
 80005c4:	408b      	lsls	r3, r1
 80005c6:	43db      	mvns	r3, r3
 80005c8:	4619      	mov	r1, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	400a      	ands	r2, r1
 80005d0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68d9      	ldr	r1, [r3, #12]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	430a      	orrs	r2, r1
 80005e0:	60da      	str	r2, [r3, #12]

	temp = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]

	//4. configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7a1b      	ldrb	r3, [r3, #8]
 80005ea:	461a      	mov	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	4619      	mov	r1, r3
 8000602:	2301      	movs	r3, #1
 8000604:	408b      	lsls	r3, r1
 8000606:	43db      	mvns	r3, r3
 8000608:	4619      	mov	r1, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	400a      	ands	r2, r1
 8000610:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	6859      	ldr	r1, [r3, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	430a      	orrs	r2, r1
 8000620:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	795b      	ldrb	r3, [r3, #5]
 800062a:	2b02      	cmp	r3, #2
 800062c:	d131      	bne.n	8000692 <GPIO_Init+0x32a>
		//configure the alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; 	//get the pin in AFRL or AFRH (0, 1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	08db      	lsrs	r3, r3, #3
 8000634:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4 * temp2));
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	7c3a      	ldrb	r2, [r7, #16]
 8000646:	3208      	adds	r2, #8
 8000648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	220f      	movs	r2, #15
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	43db      	mvns	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	7c3a      	ldrb	r2, [r7, #16]
 8000660:	4001      	ands	r1, r0
 8000662:	3208      	adds	r2, #8
 8000664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	7c3a      	ldrb	r2, [r7, #16]
 800066e:	3208      	adds	r2, #8
 8000670:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	7a5b      	ldrb	r3, [r3, #9]
 8000678:	461a      	mov	r2, r3
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	4618      	mov	r0, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	7c3a      	ldrb	r2, [r7, #16]
 800068a:	4301      	orrs	r1, r0
 800068c:	3208      	adds	r2, #8
 800068e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000692:	bf00      	nop
 8000694:	371c      	adds	r7, #28
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010000 	.word	0x40010000
 80006a4:	40010400 	.word	0x40010400

080006a8 <GPIO_ToggleOutputPin>:
 *
 * @retrun			- none
 *
 * @Note			- none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	78fa      	ldrb	r2, [r7, #3]
 80006ba:	2101      	movs	r1, #1
 80006bc:	fa01 f202 	lsl.w	r2, r1, r2
 80006c0:	405a      	eors	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	615a      	str	r2, [r3, #20]
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <GPIO_IRQInterruptConfig>:
 *
 * @retrun			- none
 *
 * @Note			- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t ENorDI) {
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	if(ENorDI == ENABLE) {
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d133      	bne.n	800074e <GPIO_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31) {
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b1f      	cmp	r3, #31
 80006ea:	d80a      	bhi.n	8000702 <GPIO_IRQInterruptConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 80006ec:	4b34      	ldr	r3, [pc, #208]	@ (80007c0 <GPIO_IRQInterruptConfig+0xf0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	2101      	movs	r1, #1
 80006f4:	fa01 f202 	lsl.w	r2, r1, r2
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a31      	ldr	r2, [pc, #196]	@ (80007c0 <GPIO_IRQInterruptConfig+0xf0>)
 80006fc:	430b      	orrs	r3, r1
 80006fe:	6013      	str	r3, [r2, #0]
		} else if(IRQNumber >= 64 && IRQNumber < 96) {
			//program ICER2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000700:	e059      	b.n	80007b6 <GPIO_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64) {
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b1f      	cmp	r3, #31
 8000706:	d90f      	bls.n	8000728 <GPIO_IRQInterruptConfig+0x58>
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b3f      	cmp	r3, #63	@ 0x3f
 800070c:	d80c      	bhi.n	8000728 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800070e:	4b2d      	ldr	r3, [pc, #180]	@ (80007c4 <GPIO_IRQInterruptConfig+0xf4>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	79fa      	ldrb	r2, [r7, #7]
 8000714:	f002 021f 	and.w	r2, r2, #31
 8000718:	2101      	movs	r1, #1
 800071a:	fa01 f202 	lsl.w	r2, r1, r2
 800071e:	4611      	mov	r1, r2
 8000720:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <GPIO_IRQInterruptConfig+0xf4>)
 8000722:	430b      	orrs	r3, r1
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	e046      	b.n	80007b6 <GPIO_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96) {
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b3f      	cmp	r3, #63	@ 0x3f
 800072c:	d943      	bls.n	80007b6 <GPIO_IRQInterruptConfig+0xe6>
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b5f      	cmp	r3, #95	@ 0x5f
 8000732:	d840      	bhi.n	80007b6 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000734:	4b24      	ldr	r3, [pc, #144]	@ (80007c8 <GPIO_IRQInterruptConfig+0xf8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	79fa      	ldrb	r2, [r7, #7]
 800073a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800073e:	2101      	movs	r1, #1
 8000740:	fa01 f202 	lsl.w	r2, r1, r2
 8000744:	4611      	mov	r1, r2
 8000746:	4a20      	ldr	r2, [pc, #128]	@ (80007c8 <GPIO_IRQInterruptConfig+0xf8>)
 8000748:	430b      	orrs	r3, r1
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	e033      	b.n	80007b6 <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31) {
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b1f      	cmp	r3, #31
 8000752:	d80a      	bhi.n	800076a <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000754:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <GPIO_IRQInterruptConfig+0xfc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	79fa      	ldrb	r2, [r7, #7]
 800075a:	2101      	movs	r1, #1
 800075c:	fa01 f202 	lsl.w	r2, r1, r2
 8000760:	4611      	mov	r1, r2
 8000762:	4a1a      	ldr	r2, [pc, #104]	@ (80007cc <GPIO_IRQInterruptConfig+0xfc>)
 8000764:	430b      	orrs	r3, r1
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	e025      	b.n	80007b6 <GPIO_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64) {
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b1f      	cmp	r3, #31
 800076e:	d90f      	bls.n	8000790 <GPIO_IRQInterruptConfig+0xc0>
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b3f      	cmp	r3, #63	@ 0x3f
 8000774:	d80c      	bhi.n	8000790 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <GPIO_IRQInterruptConfig+0x100>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	79fa      	ldrb	r2, [r7, #7]
 800077c:	f002 021f 	and.w	r2, r2, #31
 8000780:	2101      	movs	r1, #1
 8000782:	fa01 f202 	lsl.w	r2, r1, r2
 8000786:	4611      	mov	r1, r2
 8000788:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <GPIO_IRQInterruptConfig+0x100>)
 800078a:	430b      	orrs	r3, r1
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	e012      	b.n	80007b6 <GPIO_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96) {
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b3f      	cmp	r3, #63	@ 0x3f
 8000794:	d90f      	bls.n	80007b6 <GPIO_IRQInterruptConfig+0xe6>
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b5f      	cmp	r3, #95	@ 0x5f
 800079a:	d80c      	bhi.n	80007b6 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <GPIO_IRQInterruptConfig+0x104>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	79fa      	ldrb	r2, [r7, #7]
 80007a2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80007a6:	2101      	movs	r1, #1
 80007a8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ac:	4611      	mov	r1, r2
 80007ae:	4a09      	ldr	r2, [pc, #36]	@ (80007d4 <GPIO_IRQInterruptConfig+0x104>)
 80007b0:	430b      	orrs	r3, r1
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	e7ff      	b.n	80007b6 <GPIO_IRQInterruptConfig+0xe6>
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000e104 	.word	0xe000e104
 80007c8:	e000e108 	.word	0xe000e108
 80007cc:	e000e180 	.word	0xe000e180
 80007d0:	e000e184 	.word	0xe000e184
 80007d4:	e000e188 	.word	0xe000e188

080007d8 <GPIO_IRQPriorityConfig>:
 *
 * @retrun			- none
 *
 * @Note			- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
	//ipr register
	uint8_t iprx = IRQNumber / 4;
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	089b      	lsrs	r3, r3, #2
 80007e8:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 0303 	and.w	r3, r3, #3
 80007f0:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	3304      	adds	r3, #4
 80007fa:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000804:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000808:	6819      	ldr	r1, [r3, #0]
 800080a:	7b7b      	ldrb	r3, [r7, #13]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	409a      	lsls	r2, r3
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000818:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800081c:	430a      	orrs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
	...

0800082c <GPIO_IRQHandling>:
 *
 * @retrun			- none
 *
 * @Note			- none
 */
void GPIO_IRQHandling(uint8_t PinNumber) {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	//clear the EXTI PR register corresponding to the pin number
	if(EXTI->PR & (1 << PinNumber)) {
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <GPIO_IRQHandling+0x3c>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	79fa      	ldrb	r2, [r7, #7]
 800083c:	2101      	movs	r1, #1
 800083e:	fa01 f202 	lsl.w	r2, r1, r2
 8000842:	4013      	ands	r3, r2
 8000844:	2b00      	cmp	r3, #0
 8000846:	d009      	beq.n	800085c <GPIO_IRQHandling+0x30>
		//clear
		EXTI->PR |= (1 << PinNumber);
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <GPIO_IRQHandling+0x3c>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	79fa      	ldrb	r2, [r7, #7]
 800084e:	2101      	movs	r1, #1
 8000850:	fa01 f202 	lsl.w	r2, r1, r2
 8000854:	4611      	mov	r1, r2
 8000856:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <GPIO_IRQHandling+0x3c>)
 8000858:	430b      	orrs	r3, r1
 800085a:	6153      	str	r3, [r2, #20]
	}
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40010400 	.word	0x40010400

0800086c <delay>:
#include <string.h>
#include "stm32l476xx.h"

#define BTN_PRESSED DISABLE

void delay() {
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	e002      	b.n	800087e <delay+0x12>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3301      	adds	r3, #1
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a04      	ldr	r2, [pc, #16]	@ (8000894 <delay+0x28>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d9f8      	bls.n	8000878 <delay+0xc>
}
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	0003d08f 	.word	0x0003d08f

08000898 <main>:

int main(void) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOLed, GPIOButton;
	memset(&GPIOLed, 0, sizeof(GPIOLed));
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	220c      	movs	r2, #12
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f86d 	bl	8000986 <memset>
	memset(&GPIOButton, 0, sizeof(GPIOButton));
 80008ac:	463b      	mov	r3, r7
 80008ae:	220c      	movs	r2, #12
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f867 	bl	8000986 <memset>

	GPIOLed.pGPIOx = GPIOA;
 80008b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80008bc:	60fb      	str	r3, [r7, #12]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80008be:	2306      	movs	r3, #6
 80008c0:	743b      	strb	r3, [r7, #16]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80008c2:	2301      	movs	r3, #1
 80008c4:	747b      	strb	r3, [r7, #17]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80008c6:	2302      	movs	r3, #2
 80008c8:	74bb      	strb	r3, [r7, #18]
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; 	// you can also use GPIO_OP_TYPE_OD to Open drain output but you need to use external pull up resistor
 80008ca:	2300      	movs	r3, #0
 80008cc:	753b      	strb	r3, [r7, #20]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80008ce:	2300      	movs	r3, #0
 80008d0:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 80008d2:	2101      	movs	r1, #1
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d8:	f7ff fc78 	bl	80001cc <GPIO_PeriClockControl>
	GPIO_Init(&GPIOLed);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fd41 	bl	8000368 <GPIO_Init>

	GPIOButton.pGPIOx = GPIOA;
 80008e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80008ea:	603b      	str	r3, [r7, #0]
	GPIOButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80008ec:	2307      	movs	r3, #7
 80008ee:	713b      	strb	r3, [r7, #4]
	GPIOButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80008f0:	2304      	movs	r3, #4
 80008f2:	717b      	strb	r3, [r7, #5]
	GPIOButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80008f4:	2302      	movs	r3, #2
 80008f6:	71bb      	strb	r3, [r7, #6]
	GPIOButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80008f8:	2301      	movs	r3, #1
 80008fa:	71fb      	strb	r3, [r7, #7]

	//GPIO_PeriClockControl(GPIOC, ENABLE);
	GPIO_Init(&GPIOButton);
 80008fc:	463b      	mov	r3, r7
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fd32 	bl	8000368 <GPIO_Init>

	//IRQ configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRO_PRI15);
 8000904:	210f      	movs	r1, #15
 8000906:	2017      	movs	r0, #23
 8000908:	f7ff ff66 	bl	80007d8 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 800090c:	2101      	movs	r1, #1
 800090e:	2017      	movs	r0, #23
 8000910:	f7ff fede 	bl	80006d0 <GPIO_IRQInterruptConfig>

	while(1);
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <main+0x7c>

08000918 <EXTI9_5_IRQHandler>:

	return 0;
}

void EXTI9_5_IRQHandler(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	delay();
 800091c:	f7ff ffa6 	bl	800086c <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_7);
 8000920:	2007      	movs	r0, #7
 8000922:	f7ff ff83 	bl	800082c <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_6);
 8000926:	2106      	movs	r1, #6
 8000928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092c:	f7ff febc 	bl	80006a8 <GPIO_ToggleOutputPin>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000934:	480d      	ldr	r0, [pc, #52]	@ (800096c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000936:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000938:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	@ (8000970 <LoopForever+0x6>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	@ (8000974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <LoopForever+0xe>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	@ (8000980 <LoopForever+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000962:	f000 f819 	bl	8000998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000966:	f7ff ff97 	bl	8000898 <main>

0800096a <LoopForever>:

LoopForever:
  b LoopForever
 800096a:	e7fe      	b.n	800096a <LoopForever>
  ldr   r0, =_estack
 800096c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000978:	08000a00 	.word	0x08000a00
  ldr r2, =_sbss
 800097c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000980:	2000001c 	.word	0x2000001c

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>

08000986 <memset>:
 8000986:	4402      	add	r2, r0
 8000988:	4603      	mov	r3, r0
 800098a:	4293      	cmp	r3, r2
 800098c:	d100      	bne.n	8000990 <memset+0xa>
 800098e:	4770      	bx	lr
 8000990:	f803 1b01 	strb.w	r1, [r3], #1
 8000994:	e7f9      	b.n	800098a <memset+0x4>
	...

08000998 <__libc_init_array>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4d0d      	ldr	r5, [pc, #52]	@ (80009d0 <__libc_init_array+0x38>)
 800099c:	4c0d      	ldr	r4, [pc, #52]	@ (80009d4 <__libc_init_array+0x3c>)
 800099e:	1b64      	subs	r4, r4, r5
 80009a0:	10a4      	asrs	r4, r4, #2
 80009a2:	2600      	movs	r6, #0
 80009a4:	42a6      	cmp	r6, r4
 80009a6:	d109      	bne.n	80009bc <__libc_init_array+0x24>
 80009a8:	4d0b      	ldr	r5, [pc, #44]	@ (80009d8 <__libc_init_array+0x40>)
 80009aa:	4c0c      	ldr	r4, [pc, #48]	@ (80009dc <__libc_init_array+0x44>)
 80009ac:	f000 f818 	bl	80009e0 <_init>
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	10a4      	asrs	r4, r4, #2
 80009b4:	2600      	movs	r6, #0
 80009b6:	42a6      	cmp	r6, r4
 80009b8:	d105      	bne.n	80009c6 <__libc_init_array+0x2e>
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c0:	4798      	blx	r3
 80009c2:	3601      	adds	r6, #1
 80009c4:	e7ee      	b.n	80009a4 <__libc_init_array+0xc>
 80009c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ca:	4798      	blx	r3
 80009cc:	3601      	adds	r6, #1
 80009ce:	e7f2      	b.n	80009b6 <__libc_init_array+0x1e>
 80009d0:	080009f8 	.word	0x080009f8
 80009d4:	080009f8 	.word	0x080009f8
 80009d8:	080009f8 	.word	0x080009f8
 80009dc:	080009fc 	.word	0x080009fc

080009e0 <_init>:
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e2:	bf00      	nop
 80009e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e6:	bc08      	pop	{r3}
 80009e8:	469e      	mov	lr, r3
 80009ea:	4770      	bx	lr

080009ec <_fini>:
 80009ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ee:	bf00      	nop
 80009f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f2:	bc08      	pop	{r3}
 80009f4:	469e      	mov	lr, r3
 80009f6:	4770      	bx	lr
